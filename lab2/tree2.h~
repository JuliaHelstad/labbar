#ifndef __TREE2_H_
#define __TREE2_H_

///////////////////////////structar
typedef int(*cmp_t)(void *, void *);
typedef void(*free_t)(void *);
typedef void(*print_t)(void *);
typedef void*(*copy_t)(void*);
typedef void(*add_t)(void *, void *);

struct shelf
{  
  char *shelf_name;
  int amount;
};

typedef struct shelf shelf_t;

struct list
{  
  void *data;
  cmp_t compare;
  free_t free_function;
  print_t print;
  copy_t copy;
  struct list *next;
  add_t add;
};

typedef struct list list_t;

struct goods
{
  char *name;
  char *description;
  int price;
  list_t *goods_list;
  free_t free_function;
};

typedef struct goods goods_t;

typedef int(*cmp_t)(void *, void *);

struct tree
{       
  void *data;
  cmp_t compare;
  free_t free_function;
  print_t print;
  struct tree *left;
  struct tree *right;
  struct tree *parent;
};
typedef struct tree tree_t;

struct action
{
	int type; // NOTHING = 0, ADD = 1, REMOVE = 2, EDIT = 3
	goods_t *merch;
	goods_t *copy;
};
typedef struct action action_t;

///////////////////////////funktioner
int compare_goods(void *a, void *b);
void free_goods(void* a);
void print_goods(void* a);
void print_name(void *a);
tree_t *tree_new(goods_t *data, cmp_t compare, free_t free_function, print_t print);
tree_t  *tree_insert(tree_t *tree, goods_t *new_item, cmp_t compare, free_t free_function, print_t print);
void tree_insertnode(tree_t *tree, tree_t *new_item); 
void print_tree(tree_t *tree, int type);
int tree_size(tree_t *tree);
tree_t *find_treenode_by_name(tree_t *tree, char *name);
tree_t *find_treenode(tree_t *tree, int varonummer);
tree_t *remove_node(tree_t *root, tree_t *tree);
void free_tree(tree_t **tree);

void print_tree_balanced(tree_t *tree);
tree_t * balance_tree(tree_t *tree);

#endif
